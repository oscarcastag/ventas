&ANALYZE-SUSPEND _VERSION-NUMBER AB_v10r12
&ANALYZE-RESUME
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS Procedure 
/*************************************************************/  
/* Copyright (c) 1984-2005 by Progress Software Corporation  */
/*                                                           */
/* All rights reserved.  No part of this program or document */
/* may be  reproduced in  any form  or by  any means without */
/* permission in writing from PROGRESS Software Corporation. */
/*************************************************************/
/*------------------------------------------------------------------------
    File        : _exp-policies.p
    Purpose     : Export policies from a dataset to an xml file

    Syntax      :

    Description : The caller passes a comma-separated list of policies
                  or "*" for all, and the name of the xml file to be
                  created.

    Author(s)   : Fernando de Souza
    Created     : Feb 23,2005
    Notes       :
  ----------------------------------------------------------------------*/
/*          This .W file was created with the Progress AppBuilder.      */
/*----------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */

{auditing/ttdefs/_audpolicytt.i}
{auditing/ttdefs/_audfilepolicytt.i}
{auditing/ttdefs/_audfieldpolicytt.i}
{auditing/ttdefs/_audeventpolicytt.i}

{auditing/include/_dspolicy.i}

DEFINE VARIABLE hXMLWriter         AS HANDLE  NO-UNDO.
DEFINE VARIABLE hBufferPolicy      AS HANDLE  NO-UNDO.
DEFINE VARIABLE hBufferFilePolicy  AS HANDLE  NO-UNDO.
DEFINE VARIABLE hBufferFieldPolicy AS HANDLE  NO-UNDO.
DEFINE VARIABLE hBufferEventPolicy AS HANDLE  NO-UNDO.

/* parameters */
DEFINE INPUT  PARAMETER pcpolicyNames AS CHAR   NO-UNDO.
DEFINE INPUT  PARAMETER pxmlFileName  AS CHAR   NO-UNDO.
DEFINE INPUT  PARAMETER DATASET FOR dsAudPolicy.
DEFINE OUTPUT PARAMETER pcErrorMsg     AS CHAR   NO-UNDO.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE Procedure
&Scoped-define DB-AWARE no



/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Prototypes ********************** */

&IF DEFINED(EXCLUDE-writeXmlData) = 0 &THEN

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD writeXmlData Procedure 
FUNCTION writeXmlData RETURNS LOGICAL
  ( hField AS HANDLE /* parameter-definitions */ )  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ENDIF


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: Procedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW Procedure ASSIGN
         HEIGHT             = 15
         WIDTH              = 60.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK Procedure 


/* ***************************  Main Block  *************************** */

/* we will try to check if the file is writeable, in case it already exists */
FILE-INFO:FILE-NAME = pxmlFileName.
IF FILE-INFO:FILE-TYPE NE ? THEN DO:
    /* file exists - check we can write to it */
    IF INDEX(FILE-INFO:FILE-TYPE, "W":U) = 0 THEN DO:
        ASSIGN  pcErrorMsg = "File " + pxmlFileName + " is read-only".
        RETURN.
    END.

END.

ASSIGN hBufferPolicy      = BUFFER ttAuditPolicy:HANDLE
       hBufferFilePolicy  = BUFFER ttAuditFilePolicy:HANDLE
       hBufferFieldPolicy = BUFFER ttAuditFieldPolicy:HANDLE
       hBufferEventPolicy = BUFFER ttAuditEventPolicy:HANDLE.

CREATE SAX-WRITER hXMLWriter.

/* Want to format this so it is easy to read */
hXMLWriter:FORMATTED = TRUE.

hXMLWriter:SET-OUTPUT-DESTINATION("file", pxmlFileName).


hXMLWriter:START-DOCUMENT().

/* The VALIDATION-ENABLED attribute defaults to TRUE  */
/* The ENCODING           attribute defaults to UTF-8 */
/* The CREATE-FRAGMENT    attribute defaults to FALSE */
/* The STRICT             attribute defaults to TRUE  */

hXMLWriter:WRITE-COMMENT("Generated by PSC").

hXMLWriter:START-ELEMENT("Policies", "").


FOR EACH ttAuditPolicy WHERE 
    CAN-DO(pcpolicyNames, ttAuditPolicy._Audit-policy-name).

    hXMLWriter:START-ELEMENT("Policy", "").
    
    hXMLWriter:INSERT-ATTRIBUTE("GUID", ttAuditPolicy._Audit-policy-guid).
    hXMLWriter:INSERT-ATTRIBUTE("Name", ttAuditPolicy._Audit-policy-name).
    
    hXMLWriter:START-ELEMENT("policy-properties", "").
    
    writeXmlData(hBufferPolicy:BUFFER-FIELD('_Audit-policy-description')).
    writeXmlData(hBufferPolicy:BUFFER-FIELD('_Audit-data-security-level')).
    writeXmlData(hBufferPolicy:BUFFER-FIELD('_Audit-custom-detail-level')).
    writeXmlData(hBufferPolicy:BUFFER-FIELD('_Audit-policy-active')).
    
    hXMLWriter:END-ELEMENT("policy-properties", "").

    FOR EACH ttAuditFilePolicy WHERE ttAuditFilePolicy._Audit-policy-guid =
        ttAuditpolicy._Audit-policy-guid:
        hXMLWriter:START-ELEMENT("audit-table", "").
        
        hXMLWriter:INSERT-ATTRIBUTE("Name", ttAuditFilePolicy._File-name).
        hXMLWriter:INSERT-ATTRIBUTE("Owner", ttAuditFilePolicy._Owner).
        
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Audit-create-level')).
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Create-event-id')).
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Audit-update-level')).
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Update-event-id')).
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Audit-delete-level')).
        writeXmlData(hBufferFilePolicy:BUFFER-FIELD('_Delete-event-id')).


       FOR EACH ttAuditFieldPolicy 
            WHERE ttAuditFieldPolicy._Audit-policy-guid = ttAuditpolicy._Audit-policy-guid AND 
            ttAuditFieldPolicy._File-name = ttAuditFilePolicy._File-name AND
            ttAuditFieldPolicy._Owner = ttAuditFilePolicy._Owner:
        
            hXMLWriter:START-ELEMENT("audit-field", "").
            
            hXMLWriter:INSERT-ATTRIBUTE("Name", ttAuditFieldPolicy._Field-name).
            
            writeXmlData(hBufferFieldPolicy:BUFFER-FIELD('_Audit-create-level')).
            writeXmlData(hBufferFieldPolicy:BUFFER-FIELD('_Audit-update-level')).
            writeXmlData(hBufferFieldPolicy:BUFFER-FIELD('_Audit-delete-level')).
            writeXmlData(hBufferFieldPolicy:BUFFER-FIELD('_Audit-identifying-field')).
            
            
            hXMLWriter:END-ELEMENT("audit-field", "").
        END.

            
        hXMLWriter:END-ELEMENT("audit-table", "").

    END.
    
    FOR EACH ttAuditEventPolicy WHERE ttAuditEventPolicy._Audit-policy-guid =
        ttAuditPolicy._Audit-policy-guid:

        hXMLWriter:START-ELEMENT("audit-event", "").
        hXMLWriter:INSERT-ATTRIBUTE("Event-id", STRING(ttAuditEventPolicy._Event-id)).
        
        writeXmlData(hBufferEventpolicy:BUFFER-FIELD('_Event-level')).
        writeXmlData(hBufferEventPolicy:BUFFER-FIELD('_Event-criteria')).

        hXMLWriter:END-ELEMENT("audit-event", "").
    
    END.

    hXMLWriter:END-ELEMENT("Policy", "").
    
END. /* for each ttAuditPolicy */

hXMLWriter:END-ELEMENT("Policies", "").

hXMLWriter:END-DOCUMENT().

DELETE OBJECT hXMLWriter.

{auditing/include/_xmlsec.i
      &INPUT=pxmlFileName
      &mode="gen"
      }


/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Implementations ***************** */

&IF DEFINED(EXCLUDE-writeXmlData) = 0 &THEN

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION writeXmlData Procedure 
FUNCTION writeXmlData RETURNS LOGICAL
  ( hField AS HANDLE /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose: Writes data elements to the current xml document 
    Notes:  
------------------------------------------------------------------------------*/

  RETURN hXMLWriter:WRITE-DATA-ELEMENT(hField:NAME , TRIM(hField:STRING-VALUE)).

END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ENDIF

