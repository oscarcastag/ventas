package com.techsupp.roundtrip;

// the following import statement brings in all of the code
// in the com.progress.open4gl package.  This is the supporting
// java code for the Open Client product and is required for any
// program that wishes to use Open Client services

import com.progress.open4gl.*;

// the following import statement brings in all of the code
// in the com.techsupp.proxies.ping package.  This code was
// generated by compiling the "Ping.p" program and running it
// through the ProxyGen utility

import com.techsupp.roundtrip.proxy.*;

public class RoundTripTest
{
	// the following variable definition will hold an object
	// that handles the connection to and the disconnection
	// from the AppServer
	
	private RoundTripObj appServer = null;

	// the following variable definition will hold an object
	// that contains all of the internal procedure and function
	// definitions contained in the "Ping.r" procedure (which
	// should be located on the AppServers propath)
	
	private RoundTrip persistentProcedure = null;
	
	RoundTripTest(String url) {
	
		try
		{
			// the following statement instantiates a new PingObject and
			// establishes the connection to the AppServer
		
			appServer = new RoundTripObj(url, "", "", "");

			// the following statement loads the procedure "Ping.r" persistently
			// on the AppServer and places a handle to it in the object called
			// persistentProcedure.  The "createPO_Ping" method is part of the
			// proxies generated by ProxyGen

			persistentProcedure = appServer.createPO_RoundTrip();

			// the following statement invokes the getProPath function that is
			// defined in the persistent procedure which is running on the AppServer
			// and concatenates the result with the string shown and then displays
			// the results on "stdout"
		
			System.out.println("AppServer PROPATH = " + persistentProcedure.getProPath());

			// the following statement invokes the getWorkingDirectory function that is
			// defined in the persistent procedure which is running on the AppServer
			// and concatenates the result with the string shown and then displays
			// the results on "stdout"

			System.out.println("AppServer Working Directory = " + persistentProcedure.getWorkingDirectory());
		}
		catch (Exception e)
		{
			// the following two statements catch any errors that get thrown from
			// the above code and print both the error message and a stack trace
			// to "stdout"
		
			System.out.print(e.getMessage());
			e.printStackTrace();
		}

		// the following "if" statement checks to see if the persistent procedure
		// was instantiated on the AppServer properly.  If it was, we automatically
		// know that the AppServer connection worked so we go into a try/catch block
		// and attempt to release the persistent procedure (i.e. delete it) and then
		// release the connection to the AppServer
	
		if (persistentProcedure != null)
			try
			{
				// the following statement causes the persistent procedure to be
				// deleted on the AppServer
			
				persistentProcedure._release();

				// the following statement causes the AppServer connection to be
				// terminated and all AppServer resources now become available for 
				// other users
			
				appServer._release();
			}
			catch (Exception e)
			{
				// the following two statements catch any errors that get thrown from
				// the above code and print both the error message and a stack trace
				// to "stdout"
			
				System.out.println(e);
				e.printStackTrace();
			}

		// the following statement causes the java program to exit back
		// to the operating system
	
		System.exit(0);
	}
	
	public static void main(String[] args)
	{
		// the following statements invoke a new instance of the PingTest class
		// and pass a command line argument to it.  It is assumed that the
		// command line argument is a single string that contains the URL needed
		// to connect to the AppServer.

		if (args[0] != null)	
			new RoundTripTest(args[0]);
		else
			System.out.println("PingTest: No AppServer URL Argument Passed via Command Line");
	}
}
